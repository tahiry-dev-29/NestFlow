
    @Scheduled(cron = "0 0 0 * * *")
    public void updateAllSubscriptionStatuses() {
        List<SubscriptionDetailsEntity> allSubscriptions = subscriptionRepository.findAll();
        for (SubscriptionDetailsEntity subscription : allSubscriptions) {
            updateSubscriptionStatus(subscription);
        }
    }

    public SubscriptionDetailsEntity updateSubscriptionStatus(SubscriptionDetailsEntity details) {
        LocalDateTime now = LocalDateTime.now();
        if (now.isAfter(details.getSubscriptionEndDate())) {
            details.setStatus(SubscriptionDetailsEntity.Status.expired);
        } else {
            details.setStatus(SubscriptionDetailsEntity.Status.active);
        }
        return subscriptionRepository.save(details);
    }

    public SubscriptionDetailsEntity getSubscriptionById(String id) {
        return subscriptionRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription not found"));
    }

    public SubscriptionDetailsEntity updateSubscription(String id, SubscriptionDetailsEntity details) {
        return subscriptionRepository.findById(id)
                .map(existingSubscription -> {
                    if (details.getFullname() != null) {
                        existingSubscription.setFullname(details.getFullname());
                    }
                    if (details.getEmail() != null) {
                        existingSubscription.setEmail(details.getEmail());
                    }
                    if (details.getAdresse() != null) {
                        existingSubscription.setAdresse(details.getAdresse());
                    }
                    if (details.getTel() != null) {
                        existingSubscription.setTel(details.getTel());
                    }

                    if (details.getCode() != null && !details.getCode().isEmpty()) {
                        String encodedPassword = passwordEncoder.encode(details.getCode());
                        existingSubscription.setCode(encodedPassword);
                    }
                    return subscriptionRepository.save(existingSubscription);
                })
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription not found"));
    }

    public void deleteSubscription(String id) {
        subscriptionRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription not found"));
        subscriptionRepository.deleteById(id);
    }

    public List<SubscriptionDetailsEntity> getAllSubscriptions() {
        return subscriptionRepository.findAll();
    }

    public Mono<Map<String, Object>> getSubscriptionStatus(String id) {
        return Mono.fromCallable(() -> subscriptionRepository.findById(id))
                .flatMap(optionalSubscription -> {
                    if (optionalSubscription.isEmpty()) {
                        return Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription not found"));
                    }

                    SubscriptionDetailsEntity subscription = optionalSubscription.get();
                    LocalDateTime now = LocalDateTime.now();
                    LocalDateTime endDate = subscription.getSubscriptionEndDate();
                    LocalDateTime startDate = subscription.getSubscriptionStartDate();

                    if (startDate == null || endDate == null) {
                        return Mono.error(new IllegalStateException("Subscription start or end date is null"));
                    }
                    if (endDate.isBefore(startDate)) {
                        return Mono.error(new IllegalStateException("End date is before start date"));
                    }

                    long remainingDays = ChronoUnit.DAYS.between(now, endDate);
                    long totalDays;
                    Object progressPercentage;

                    if (remainingDays <= 0) {
                        totalDays = 1;
                        progressPercentage = 0.0;
                    } else {
                        Period totalDuration = Period.between(startDate.toLocalDate(), endDate.toLocalDate());
                        totalDays = totalDuration.getDays();

                        if (totalDays == 0) {
                            progressPercentage = "Infinity";
                        } else {
                            progressPercentage = (double) remainingDays / totalDays * 100;
                        }
                    }

                    Map<String, Object> status = new HashMap<>();
                    status.put("remainingDays", remainingDays);
                    status.put("progressPercentage", progressPercentage);
                    status.put("isExpired", remainingDays <= 0);
                    status.put("daysUntilExpiration", remainingDays);

                    return Mono.just(status);
                });
    }
